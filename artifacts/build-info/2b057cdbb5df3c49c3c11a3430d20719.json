{"id":"2b057cdbb5df3c49c3c11a3430d20719","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/SimpleStorage.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;//sol version\r\n\r\ncontract SimpleStorage {\r\n    uint256  favouriteNumber;\r\n    uint256[] listOfFavNumbers;\r\n    Person[] peopleList;\r\n    mapping(string=>uint256) public nameToNumber ;\r\n struct Person{\r\n       uint256 number;\r\n       string name; \r\n    }\r\n\r\n    function store(uint256 _favouriteNumber) public  {\r\n        favouriteNumber=_favouriteNumber;\r\n        listOfFavNumbers.push(favouriteNumber);\r\n\r\n    } \r\n    function storePerson(uint256 _favouriteNumber, string calldata name) public  {\r\n        peopleList.push(Person(_favouriteNumber,name));\r\n        nameToNumber[name]=_favouriteNumber;\r\n        \r\n    }\r\n\r\n    function retreiveFavNumber()public view returns (uint256) {\r\n       return  favouriteNumber;\r\n    }\r\n   \r\n    function retreiveFavNumberAtIndex(uint256 index)public view returns (uint256) {\r\n        if (index>listOfFavNumbers.length) {\r\n            return  0;\r\n        }\r\n       return  listOfFavNumbers[index];\r\n    }\r\n    function retreivePersonAtIndex(uint256 index)public view returns ( Person memory) {\r\n        // if (index>listOfFavNumbers.length) {\r\n        //     return  0;\r\n        // }\r\n       return  peopleList[index];\r\n    }\r\n\r\n function retreivePersonFromName(string calldata name)public view returns (uint256) {\r\n        // if (index>listOfFavNumbers.length) {\r\n        //     return  0;\r\n        // }\r\n       return  nameToNumber[name];\r\n    }\r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":112,"linearizedBaseContracts":[112],"name":"SimpleStorage","nameLocation":"81:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"favouriteNumber","nameLocation":"111:15:0","nodeType":"VariableDeclaration","scope":112,"src":"102:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"102:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"listOfFavNumbers","nameLocation":"143:16:0","nodeType":"VariableDeclaration","scope":112,"src":"133:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"133:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5,"nodeType":"ArrayTypeName","src":"133:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":10,"mutability":"mutable","name":"peopleList","nameLocation":"175:10:0","nodeType":"VariableDeclaration","scope":112,"src":"166:19:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$19_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":8,"nodeType":"UserDefinedTypeName","pathNode":{"id":7,"name":"Person","nameLocations":["166:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"166:6:0"},"referencedDeclaration":19,"src":"166:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$19_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":9,"nodeType":"ArrayTypeName","src":"166:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$19_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"internal"},{"constant":false,"functionSelector":"2fae4ffd","id":14,"mutability":"mutable","name":"nameToNumber","nameLocation":"224:12:0","nodeType":"VariableDeclaration","scope":112,"src":"192:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":13,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":11,"name":"string","nodeType":"ElementaryTypeName","src":"200:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"192:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"208:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"canonicalName":"SimpleStorage.Person","id":19,"members":[{"constant":false,"id":16,"mutability":"mutable","name":"number","nameLocation":"272:6:0","nodeType":"VariableDeclaration","scope":19,"src":"264:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"264:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"name","nameLocation":"295:4:0","nodeType":"VariableDeclaration","scope":19,"src":"288:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":17,"name":"string","nodeType":"ElementaryTypeName","src":"288:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Person","nameLocation":"248:6:0","nodeType":"StructDefinition","scope":112,"src":"241:67:0","visibility":"public"},{"body":{"id":34,"nodeType":"Block","src":"365:102:0","statements":[{"expression":{"id":26,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":24,"name":"favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"376:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":25,"name":"_favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"392:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"376:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":27,"nodeType":"ExpressionStatement","src":"376:32:0"},{"expression":{"arguments":[{"id":31,"name":"favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"441:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":28,"name":"listOfFavNumbers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"419:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"436:4:0","memberName":"push","nodeType":"MemberAccess","src":"419:21:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"419:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":33,"nodeType":"ExpressionStatement","src":"419:38:0"}]},"functionSelector":"6057361d","id":35,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"325:5:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"_favouriteNumber","nameLocation":"339:16:0","nodeType":"VariableDeclaration","scope":35,"src":"331:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"331:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"330:26:0"},"returnParameters":{"id":23,"nodeType":"ParameterList","parameters":[],"src":"365:0:0"},"scope":112,"src":"316:151:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":57,"nodeType":"Block","src":"551:121:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":46,"name":"_favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"585:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":47,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"602:4:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":45,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"578:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$19_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"578:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$19_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$19_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":42,"name":"peopleList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"562:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$19_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"573:4:0","memberName":"push","nodeType":"MemberAccess","src":"562:15:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$19_storage_$dyn_storage_ptr_$_t_struct$_Person_$19_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$19_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"562:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"562:46:0"},{"expression":{"id":55,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":51,"name":"nameToNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"619:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":53,"indexExpression":{"id":52,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"632:4:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"619:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":54,"name":"_favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"638:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"619:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":56,"nodeType":"ExpressionStatement","src":"619:35:0"}]},"functionSelector":"5cb4c672","id":58,"implemented":true,"kind":"function","modifiers":[],"name":"storePerson","nameLocation":"483:11:0","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"_favouriteNumber","nameLocation":"503:16:0","nodeType":"VariableDeclaration","scope":58,"src":"495:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":36,"name":"uint256","nodeType":"ElementaryTypeName","src":"495:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"name","nameLocation":"537:4:0","nodeType":"VariableDeclaration","scope":58,"src":"521:20:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":38,"name":"string","nodeType":"ElementaryTypeName","src":"521:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"494:48:0"},"returnParameters":{"id":41,"nodeType":"ParameterList","parameters":[],"src":"551:0:0"},"scope":112,"src":"474:198:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":65,"nodeType":"Block","src":"738:41:0","statements":[{"expression":{"id":63,"name":"favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"756:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":62,"id":64,"nodeType":"Return","src":"748:23:0"}]},"functionSelector":"3aade401","id":66,"implemented":true,"kind":"function","modifiers":[],"name":"retreiveFavNumber","nameLocation":"689:17:0","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"706:2:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":66,"src":"729:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":60,"name":"uint256","nodeType":"ElementaryTypeName","src":"729:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"728:9:0"},"scope":112,"src":"680:99:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":85,"nodeType":"Block","src":"868:130:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":73,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"883:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":74,"name":"listOfFavNumbers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"889:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"906:6:0","memberName":"length","nodeType":"MemberAccess","src":"889:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"883:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":80,"nodeType":"IfStatement","src":"879:71:0","trueBody":{"id":79,"nodeType":"Block","src":"914:36:0","statements":[{"expression":{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":72,"id":78,"nodeType":"Return","src":"929:9:0"}]}},{"expression":{"baseExpression":{"id":81,"name":"listOfFavNumbers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"967:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":83,"indexExpression":{"id":82,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"984:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"967:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":72,"id":84,"nodeType":"Return","src":"959:31:0"}]},"functionSelector":"d7afc1dc","id":86,"implemented":true,"kind":"function","modifiers":[],"name":"retreiveFavNumberAtIndex","nameLocation":"799:24:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"index","nameLocation":"832:5:0","nodeType":"VariableDeclaration","scope":86,"src":"824:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":67,"name":"uint256","nodeType":"ElementaryTypeName","src":"824:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"823:15:0"},"returnParameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":86,"src":"859:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70,"name":"uint256","nodeType":"ElementaryTypeName","src":"859:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"858:9:0"},"scope":112,"src":"790:208:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":98,"nodeType":"Block","src":"1086:133:0","statements":[{"expression":{"baseExpression":{"id":94,"name":"peopleList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1194:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$19_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":96,"indexExpression":{"id":95,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1205:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1194:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$19_storage","typeString":"struct SimpleStorage.Person storage ref"}},"functionReturnParameters":93,"id":97,"nodeType":"Return","src":"1186:25:0"}]},"functionSelector":"5bae7047","id":99,"implemented":true,"kind":"function","modifiers":[],"name":"retreivePersonAtIndex","nameLocation":"1013:21:0","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"index","nameLocation":"1043:5:0","nodeType":"VariableDeclaration","scope":99,"src":"1035:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":87,"name":"uint256","nodeType":"ElementaryTypeName","src":"1035:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1034:15:0"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":99,"src":"1071:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$19_memory_ptr","typeString":"struct SimpleStorage.Person"},"typeName":{"id":91,"nodeType":"UserDefinedTypeName","pathNode":{"id":90,"name":"Person","nameLocations":["1071:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"1071:6:0"},"referencedDeclaration":19,"src":"1071:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$19_storage_ptr","typeString":"struct SimpleStorage.Person"}},"visibility":"internal"}],"src":"1069:16:0"},"scope":112,"src":"1004:215:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"1307:134:0","statements":[{"expression":{"baseExpression":{"id":106,"name":"nameToNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1415:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":108,"indexExpression":{"id":107,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"1428:4:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1415:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":105,"id":109,"nodeType":"Return","src":"1407:26:0"}]},"functionSelector":"96c89e5c","id":111,"implemented":true,"kind":"function","modifiers":[],"name":"retreivePersonFromName","nameLocation":"1233:22:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"name","nameLocation":"1272:4:0","nodeType":"VariableDeclaration","scope":111,"src":"1256:20:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":100,"name":"string","nodeType":"ElementaryTypeName","src":"1256:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1255:22:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":111,"src":"1298:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1298:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1297:9:0"},"scope":112,"src":"1224:217:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":113,"src":"72:1372:0","usedErrors":[],"usedEvents":[]}],"src":"32:1412:0"}}},"contracts":{"contracts/SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retreiveFavNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"retreiveFavNumberAtIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"retreivePersonAtIndex","outputs":[{"components":[{"internalType":"uint256","name":"number","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"internalType":"struct SimpleStorage.Person","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"retreivePersonFromName","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favouriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favouriteNumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"name":"storePerson","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retreiveFavNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"retreiveFavNumberAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"retreivePersonAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SimpleStorage.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"retreivePersonFromName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favouriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favouriteNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"storePerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0x4d8291e2432b6b450a70636821e61516694babb7a89a2d65084030e184a12b90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68e959af7d6d551e9d943659e0442368a1d7fcedb62f20359195a0e09b7c71c6\",\"dweb:/ipfs/QmVaFVgJvjZepaWGaHp6otHHP7p6uawTK2TpM5rwgjP1hj\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[9]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.gt\t@.BB0_12\n\tsub.s!\t@CPI0_6[0], r2, r4\n\tjump.eq\t@.BB0_37\n\tsub.s!\t@CPI0_7[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r4\n\tsstore\tr0, r4\n\tadd\t1, r0, r2\n\tsload\tr2, r1\n\tsub.s!\t@CPI0_13[0], r1, r3\n\tjump.le\t@.BB0_78\n.BB0_43:\n\tadd\t@CPI0_19[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_8[0], r2, r4\n\tjump.eq\t@.BB0_14\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.eq\t@.BB0_19\n\tsub.s!\t@CPI0_10[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t192, r0, r2\n\tst.1\t64, r2\n\tst.1\t128, r0\n\tadd\t96, r0, r2\n\tst.1\t160, r2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t2, r0, r2\n\tsload\tr2, r3\n\tsub!\tr3, r1, r3\n\tjump.le\t@.BB0_24\n\tst.1\t0, r2\n\tadd\t256, r0, r5\n\tst.1\t64, r5\n\tshl.s\t1, r1, r1\n\tadd\t@CPI0_16[0], r1, r2\n\tsload\tr2, r2\n\tst.1\t192, r2\n\tadd\t@CPI0_17[0], r1, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.eq\t@.BB0_28\n.BB0_27:\n\tadd\t@CPI0_19[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_12:\n\tsub.s!\t@CPI0_4[0], r2, r4\n\tjump.eq\t@.BB0_79\n\tsub.s!\t@CPI0_5[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub!\tr3, r1, r4\n\tadd\tr0, r0, r4\n\tjump.lt\t@.BB0_93\n\tsub!\tr3, r1, r3\n\tjump.le\t@.BB0_24\n\tst.1\t0, r2\n\tadd\t@CPI0_11[0], r1, r1\n\tsload\tr1, r4\n.BB0_93:\n\tst.1\t128, r4\n\tadd\t@CPI0_12[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_37:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r6\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_13[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r5\n\tld\tr5, r7\n\tsub.s!\t@CPI0_13[0], r7, r5\n\tjump.gt\t@.BB0_2\n\tadd\tr2, r7, r2\n\tadd\t36, r2, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_2\n\tadd\t192, r0, r2\n\tst.1\t64, r2\n\tst.1\t128, r6\n\tadd\t31, r7, r3\n\tsub.s\t32, r0, r11\n\tand\tr3, r11, r3\n\tadd\t63, r3, r3\n\tand\tr3, r11, r3\n\tsub.s!\t@CPI0_15[0], r3, r5\n\tjump.gt\t@.BB0_43\n\tadd\t192, r3, r3\n\tst.1\t64, r3\n\tand\t31, r7, r8\n\tadd\t32, r4, r10\n\tptr.add\tr1, r10, r1\n\tst.1\t192, r7\n\tshr.s!\t5, r7, r9\n\tjump.eq\t@.BB0_95\n\tadd\tr0, r0, r3\n.BB0_47:\n\tshl.s\t5, r3, r4\n\tptr.add\tr1, r4, r5\n\tld\tr5, r5\n\tadd\t224, r4, r4\n\tst.1\tr4, r5\n\tadd\t1, r3, r3\n\tsub!\tr3, r9, r4\n\tjump.lt\t@.BB0_47\n.BB0_95:\n\tsub!\tr8, r0, r3\n\tjump.eq\t@.BB0_49\n\tshl.s\t5, r9, r3\n\tptr.add\tr1, r3, r1\n\tshl.s\t3, r8, r4\n\tadd\t224, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_49:\n\tadd\t224, r7, r1\n\tst.1\tr1, r0\n\tst.1\t160, r2\n\tadd\t2, r0, r2\n\tsload\tr2, r1\n\tsub.s!\t@CPI0_13[0], r1, r3\n\tjump.gt\t@.BB0_43\n\tadd\t1, r1, r3\n\tsstore\tr2, r3\n\tst.1\t0, r2\n\tshl.s\t1, r1, r1\n\tadd\t@CPI0_16[0], r1, r2\n\tld.1\t128, r3\n\tsstore\tr2, r3\n\tadd\t@CPI0_17[0], r1, r4\n\tld.1\t192, r5\n\tsub.s!\t@CPI0_13[0], r5, r1\n\tjump.gt\t@.BB0_43\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_27\n\tadd\tr11, r0, stack-[1]\n\tadd\tr10, r0, stack-[3]\n\tadd\tr9, r0, stack-[7]\n\tadd\tr8, r0, stack-[8]\n\tadd\tr7, r0, stack-[4]\n\tadd\tr6, r0, stack-[5]\n\tadd\tr3, r0, stack-[2]\n\tsub.s!\t32, r3, r1\n\tadd\tr4, r0, stack-[6]\n\tadd\tr5, r0, stack-[9]\n\tjump.lt\t@.BB0_55\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_18[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[2], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[6], r0, r4\n\tjump.ge\t@.BB0_55\n.BB0_56:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_56\n.BB0_55:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_72\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_18[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[1], r0, r3\n\tand!\tstack-[9], r3, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_66\n\tadd\t224, r0, r3\n\tjump\t@.BB0_69\n.BB0_14:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_13[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r2\n\tadd\t36, r4, r1\n\tnear_call\tr0, @abi_decode_available_length_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[8]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\t3, r0, r4\n\tadd\tstack-[8], r0, r3\n\tadd\tstack-[9], r0, r1\n\tadd\tr3, r1, r2\n\tst.1\tr2, r4\n\tadd\t32, r3, r2\n\tjump\t@.BB0_87\n.BB0_19:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_79:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_13[0], r1, r2\n\tjump.le\t@.BB0_82\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_24:\n\tadd\t@CPI0_19[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_78:\n\tadd\t1, r1, r3\n\tsstore\tr2, r3\n\tadd\tr4, r0, stack-[9]\n\tnear_call\tr0, @storage_array_index_access_uint256_dyn_ptr, @DEFAULT_UNWIND\n\tshl.s\t3, r2, r2\n\tsub.s\t1, r0, r3\n\tshl\tr3, r2, r4\n\txor\tr4, r3, r4\n\tsub.s!\t255, r2, r5\n\tadd.le\tr4, r0, r3\n\tshl\tstack-[9], r2, r2\n\tadd.gt\tr0, r0, r2\n\tsload\tr1, r4\n\tand\tr3, r4, r3\n\tor\tr3, r2, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_82:\n\tadd\t4, r1, r1\n\tadd\tr3, r0, r2\n\tnear_call\tr0, @abi_decode_string_calldata, @DEFAULT_UNWIND\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_96\n\tadd\tr0, r0, r6\n.BB0_84:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_84\n.BB0_96:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_86\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_86:\n\tadd\tr3, r2, r1\n\tadd\t3, r0, r4\n\tst.1\tr1, r4\n\tadd\t32, r2, r2\n\tadd\tr3, r0, r1\n.BB0_87:\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_28:\n\tst.1\t256, r6\n\tsub!\tr3, r0, r3\n\tadd\tr5, r0, stack-[9]\n\tjump.eq\t@.BB0_30\n\tadd\tr6, r0, stack-[8]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_18[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r6\n\tsub!\tr6, r0, r2\n\tadd\tstack-[9], r0, r5\n\tjump.ne\t@.BB0_34\n\tadd\t288, r0, r1\n\tjump\t@.BB0_29\n.BB0_30:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t288, r1\n\tsub!\tr6, r0, r1\n\tadd\t320, r0, r1\n\tadd.eq\t288, r0, r1\n.BB0_29:\n\tsub.s\t256, r1, r2\n\tadd\tr5, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r1\n\tst.1\t224, r1\n\tadd\t32, r0, r1\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[9]\n\tst.1.inc\tr4, r1, r1\n\tld.1\t192, r2\n\tst.1\tr1, r2\n\tadd\t64, r4, r1\n\tadd\t64, r0, r2\n\tld.1\t224, r3\n\tst.1\tr1, r2\n\tadd\t96, r4, r2\n\tld.1.inc\tr3, r3, r1\n\tadd\tr3, r0, stack-[8]\n\tst.1\tr2, r3\n\tadd\t128, r4, r2\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tadd\tstack-[9], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tadd\t128, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_34:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_35:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t288, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r6, r4\n\tjump.lt\t@.BB0_35\n\tadd\t320, r2, r1\n\tjump\t@.BB0_29\n.BB0_72:\n\tsub!\tstack-[9], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_74\n\tld.1\t224, r1\n.BB0_74:\n\tadd\tstack-[9], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB0_57\n.BB0_66:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_67:\n\tadd\tr4, r0, r5\n\tadd\t192, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_67\n\tadd\t224, r5, r3\n.BB0_69:\n\tsub.s!\tstack-[9], r2, r2\n\tjump.ge\t@.BB0_71\n\tadd\tstack-[9], r0, r2\n\tshl.s\t3, r2, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_71:\n\tadd\t1, r0, r1\n\tadd\tstack-[9], r0, r2\n\tshl.s\t1, r2, r2\n.BB0_57:\n\tor\tr2, r1, r1\n\tadd\tstack-[6], r0, r2\n\tsstore\tr2, r1\n\tadd\tstack-[3], r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r2\n\tld.1\t64, r1\n\tadd\tstack-[7], r0, r6\n\tsub!\tr6, r0, r3\n\tjump.eq\t@.BB0_94\n\tadd\tr0, r0, r3\n.BB0_59:\n\tshl.s\t5, r3, r4\n\tadd\tr1, r4, r5\n\tptr.add\tr2, r4, r4\n\tld\tr4, r4\n\tst.1\tr5, r4\n\tadd\t1, r3, r3\n\tsub!\tr3, r6, r4\n\tjump.lt\t@.BB0_59\n.BB0_94:\n\tsub!\tstack-[8], r0, r3\n\tjump.eq\t@.BB0_61\n\tadd\tstack-[7], r0, r3\n\tshl.s\t5, r3, r3\n\tptr.add\tr2, r3, r2\n\tadd\tr1, r3, r3\n\tadd\tstack-[8], r0, r4\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB0_61:\n\tadd\tstack-[4], r0, r4\n\tadd\tr1, r4, r2\n\tadd\t3, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r4, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_decode_available_length_string:\n.func_begin2:\n\tadd\tr1, r0, r4\n\tsub.s!\t@CPI2_0[0], r2, r1\n\tjump.ge\t@.BB2_1\n\tadd\t31, r2, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI2_1[0], r5, r7\n\tjump.gt\t@.BB2_1\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB2_1\n\tst.1\t64, r5\n\tst.1.inc\tr1, r2, r5\n\tadd\tr2, r4, r6\n\tsub!\tr6, r3, r3\n\tjump.gt\t@.BB2_5\n\tand\t31, r2, r3\n\tptr.add\tstack[@ptr_calldata], r4, r4\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB2_11\n\tadd\tr0, r0, r7\n.BB2_8:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr4, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB2_8\n.BB2_11:\n\tsub!\tr3, r0, r7\n\tjump.eq\t@.BB2_10\n\tshl.s\t5, r6, r6\n\tptr.add\tr4, r6, r4\n\tadd\tr5, r6, r6\n\tshl.s\t3, r3, r3\n\tld.1\tr6, r7\n\tshl\tr7, r3, r7\n\tshr\tr7, r3, r7\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r7, r3\n\tst.1\tr6, r3\n.BB2_10:\n\tadd\tr5, r2, r2\n\tst.1\tr2, r0\n\tret\n.BB2_1:\n\tadd\t@CPI2_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin3:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB3_3\n\tadd\tr0, r0, r4\n.BB3_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB3_2\n.BB3_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end3:\n\nabi_decode_string_calldata:\n.func_begin4:\n\tadd\t31, r1, r3\n\tadd\t@CPI4_0[0], r0, r4\n\tsub!\tr3, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI4_0[0], r2, r6\n\tand\t@CPI4_0[0], r3, r3\n\tsub!\tr3, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr3, r6, r3\n\tsub.s!\t@CPI4_0[0], r3, r3\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.eq\t@.BB4_1\n\tptr.add\tstack[@ptr_calldata], r1, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI4_1[0], r3, r4\n\tjump.gt\t@.BB4_1\n\tadd\t32, r1, r1\n\tadd\tr1, r3, r4\n\tsub!\tr4, r2, r2\n\tjump.gt\t@.BB4_1\n\tadd\tr3, r0, r2\n\tret\n.BB4_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nstorage_array_index_access_uint256_dyn_ptr:\n.func_begin5:\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr3, r1, r3\n\tjump.le\t@.BB5_1\n\tst.1\t0, r2\n\tadd\t@CPI5_2[0], r1, r1\n\tadd\tr0, r0, r2\n\tret\n.BB5_1:\n\tadd\t@CPI5_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\n__sha3:\n.func_begin6:\n\tadd\t@CPI6_0[0], r0, r3\n\tsub.s!\t@CPI6_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI6_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_2\n\tld\tr1, r1\n\tret\n.BB6_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\n__staticcall:\n.func_begin7:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB7_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB7_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end7:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI6_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1555351153\nCPI0_3:\n\t.cell 2529730139\nCPI0_4:\n\t.cell 2529730140\nCPI0_5:\n\t.cell 3618619868\nCPI0_6:\n\t.cell 1555351154\nCPI0_7:\n\t.cell 1616328221\nCPI0_8:\n\t.cell 799952893\nCPI0_9:\n\t.cell 984474625\nCPI0_10:\n\t.cell 1538158663\nCPI0_11:\nCPI5_2:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_12:\n\t.cell 2535301202817642044428229017600\nCPI0_13:\nCPI1_0:\nCPI2_1:\nCPI4_1:\n\t.cell 18446744073709551615\nCPI0_14:\n\t.cell 2535301200456458802993406410752\nCPI0_15:\n\t.cell 18446744073709551423\nCPI0_16:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403022\nCPI0_17:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403023\nCPI0_18:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_19:\nCPI1_1:\nCPI2_2:\nCPI5_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_20:\nCPI1_2:\nCPI2_3:\nCPI5_1:\n\t.cell 2852213850513516153367582212096\nCPI2_0:\n\t.cell 18446744073709551616\nCPI4_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI6_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"nameToNumber(string)":"2fae4ffd","retreiveFavNumber()":"3aade401","retreiveFavNumberAtIndex(uint256)":"d7afc1dc","retreivePersonAtIndex(uint256)":"5bae7047","retreivePersonFromName(string)":"96c89e5c","store(uint256)":"6057361d","storePerson(uint256,string)":"5cb4c672"}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage_112\" {\n    code {\n        {\n            /// @src 0:72:1444  \"contract SimpleStorage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_112_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_112_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage_112_deployed\" {\n        code {\n            {\n                /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x2fae4ffd {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset := calldataload(_2)\n                        if gt(offset, 0xffffffffffffffff) { revert(_3, _3) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_3, _3) }\n                        let array := abi_decode_available_length_string(add(offset, 36), calldataload(add(_2, offset)), calldatasize())\n                        let pos := mload(_1)\n                        let length := mload(array)\n                        copy_memory_to_memory_with_cleanup(add(array, 32), pos, length)\n                        let end := add(pos, length)\n                        mstore(end, /** @src 0:192:236  \"mapping(string=>uint256) public nameToNumber\" */ 3)\n                        /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                        let _4 := sload(keccak256(pos, add(sub(end, pos), 32)))\n                        let memPos := mload(_1)\n                        mstore(memPos, _4)\n                        return(memPos, 32)\n                    }\n                    case 0x3aade401 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _5 := sload(_3)\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, _5)\n                        return(memPos_1, 32)\n                    }\n                    case 0x5bae7047 {\n                        if callvalue() { revert(_3, _3) }\n                        let _6 := 32\n                        if slt(add(calldatasize(), not(3)), _6) { revert(_3, _3) }\n                        let memPtr := mload(_1)\n                        finalize_allocation_5072(memPtr)\n                        mstore(memPtr, _3)\n                        mstore(add(memPtr, _6), 96)\n                        /// @src 0:1194:1211  \"peopleList[index]\"\n                        let _7, _8 := storage_array_index_access_struct_Person__dyn(/** @src 0:72:1444  \"contract SimpleStorage {...\" */ calldataload(_2))\n                        let memPtr_1 := mload(_1)\n                        finalize_allocation_5072(memPtr_1)\n                        mstore(memPtr_1, sload(_7))\n                        let _9 := 1\n                        let _10 := add(_7, 1)\n                        let memPtr_2 := mload(_1)\n                        let ret := _3\n                        let slotValue := sload(_10)\n                        let length_1 := extract_byte_array_length(slotValue)\n                        mstore(memPtr_2, length_1)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(add(memPtr_2, _6), and(slotValue, not(255)))\n                            ret := add(add(memPtr_2, shl(5, iszero(iszero(length_1)))), _6)\n                        }\n                        case 1 {\n                            mstore(_3, _10)\n                            let dataPos := keccak256(_3, _6)\n                            let i := _3\n                            for { } lt(i, length_1) { i := add(i, _6) }\n                            {\n                                mstore(add(add(memPtr_2, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _9)\n                            }\n                            ret := add(add(memPtr_2, i), _6)\n                        }\n                        finalize_allocation(memPtr_2, sub(ret, memPtr_2))\n                        let _11 := add(memPtr_1, _6)\n                        mstore(_11, memPtr_2)\n                        let memPos_2 := mload(_1)\n                        mstore(memPos_2, _6)\n                        mstore(add(memPos_2, _6), mload(memPtr_1))\n                        let memberValue0 := mload(_11)\n                        mstore(add(memPos_2, _1), _1)\n                        let length_2 := mload(memberValue0)\n                        mstore(add(memPos_2, 96), length_2)\n                        copy_memory_to_memory_with_cleanup(add(memberValue0, _6), add(memPos_2, 128), length_2)\n                        return(memPos_2, add(sub(add(memPos_2, and(add(length_2, 31), not(31))), memPos_2), 128))\n                    }\n                    case 0x5cb4c672 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        let offset_1 := calldataload(36)\n                        let _12 := 0xffffffffffffffff\n                        if gt(offset_1, _12) { revert(_3, _3) }\n                        let value1, value2 := abi_decode_string_calldata(add(_2, offset_1), calldatasize())\n                        let memPtr_3 := mload(_1)\n                        finalize_allocation_5072(memPtr_3)\n                        mstore(memPtr_3, value)\n                        let _13 := abi_decode_available_length_string(/** @src 0:578:607  \"Person(_favouriteNumber,name)\" */ value1, value2, /** @src 0:72:1444  \"contract SimpleStorage {...\" */ calldatasize())\n                        let _14 := 32\n                        /// @src 0:578:607  \"Person(_favouriteNumber,name)\"\n                        let _15 := add(memPtr_3, /** @src 0:72:1444  \"contract SimpleStorage {...\" */ _14)\n                        mstore(_15, _13)\n                        let oldLen := sload(/** @src 0:562:572  \"peopleList\" */ 0x02)\n                        /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _16 := 1\n                        sstore(/** @src 0:562:572  \"peopleList\" */ 0x02, /** @src 0:72:1444  \"contract SimpleStorage {...\" */ add(oldLen, _16))\n                        let slot, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, 36)\n                        }\n                        sstore(slot, mload(memPtr_3))\n                        let memberSlot := add(slot, _16)\n                        let _17 := mload(_15)\n                        let newLen := mload(_17)\n                        if gt(newLen, _12)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _18 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_18, 31)\n                        {\n                            mstore(_3, memberSlot)\n                            let data := keccak256(_3, _14)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _14) { deleteStart := data }\n                            let _19 := add(data, shr(5, add(_18, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _19) { start := add(start, _16) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _14\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_3, memberSlot)\n                            let dstPtr := keccak256(_3, _14)\n                            let i_1 := _3\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _14) }\n                            {\n                                sstore(dstPtr, mload(add(_17, srcOffset)))\n                                dstPtr := add(dstPtr, _16)\n                                srcOffset := add(srcOffset, _14)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_17, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_16, newLen), _16))\n                        }\n                        default {\n                            let value_1 := _3\n                            if newLen\n                            {\n                                value_1 := mload(add(_17, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_1, not(shr(shl(3, newLen), not(0)))), shl(_16, newLen)))\n                        }\n                        let pos_1 := mload(_1)\n                        calldatacopy(pos_1, value1, value2)\n                        let _20 := add(pos_1, value2)\n                        mstore(_20, /** @src 0:619:631  \"nameToNumber\" */ 0x03)\n                        /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                        sstore(keccak256(pos_1, add(sub(_20, pos_1), _14)), value)\n                        return(_3, _3)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let value_2 := calldataload(_2)\n                        sstore(_3, value_2)\n                        let oldLen_1 := sload(1)\n                        if iszero(lt(oldLen_1, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 0x24)\n                        }\n                        sstore(1, add(oldLen_1, 1))\n                        let slot_1, offset_3 := storage_array_index_access_uint256_dyn_ptr(oldLen_1)\n                        let _21 := sload(slot_1)\n                        let shiftBits := shl(3, offset_3)\n                        sstore(slot_1, or(and(_21, not(shl(shiftBits, not(0)))), shl(shiftBits, value_2)))\n                        return(_3, _3)\n                    }\n                    case 0x96c89e5c {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset_4 := calldataload(_2)\n                        if gt(offset_4, 0xffffffffffffffff) { revert(_3, _3) }\n                        let value0, value1_1 := abi_decode_string_calldata(add(_2, offset_4), calldatasize())\n                        let pos_2 := mload(_1)\n                        calldatacopy(pos_2, value0, value1_1)\n                        let _22 := add(pos_2, value1_1)\n                        mstore(_22, /** @src 0:1415:1427  \"nameToNumber\" */ 0x03)\n                        /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                        let _23 := sload(keccak256(pos_2, add(sub(_22, pos_2), 32)))\n                        let memPos_3 := mload(_1)\n                        mstore(memPos_3, _23)\n                        return(memPos_3, 32)\n                    }\n                    case 0xd7afc1dc {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let ret_1 := fun_retreiveFavNumberAtIndex(calldataload(_2))\n                        let memPos_4 := mload(_1)\n                        mstore(memPos_4, ret_1)\n                        return(memPos_4, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation_5072(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:72:1444  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:72:1444  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(length, 31), not(31)), 0x20))\n                array := memPtr\n                mstore(memPtr, length)\n                if gt(add(src, length), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                calldatacopy(add(memPtr, 0x20), src, length)\n                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 0:72:1444  \"contract SimpleStorage {...\"\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_string_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:1194:1204  \"peopleList\" */ 0x02)))\n                /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1194:1204  \"peopleList\" */ 0x02)\n                /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                slot := add(29102676481673041902632991033461445430619272659676223336789171408008386403022, shl(1, index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:72:1444  \"contract SimpleStorage {...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function storage_array_index_access_uint256_dyn_ptr(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:419:435  \"listOfFavNumbers\" */ 0x01)))\n                /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:419:435  \"listOfFavNumbers\" */ 0x01)\n                /// @src 0:72:1444  \"contract SimpleStorage {...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, index)\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @ast-id 86 @src 0:790:998  \"function retreiveFavNumberAtIndex(uint256 index)public view returns (uint256) {...\"\n            function fun_retreiveFavNumberAtIndex(var_index) -> var\n            {\n                /// @src 0:879:950  \"if (index>listOfFavNumbers.length) {...\"\n                if /** @src 0:883:912  \"index>listOfFavNumbers.length\" */ gt(var_index, /** @src 0:72:1444  \"contract SimpleStorage {...\" */ sload(/** @src 0:889:905  \"listOfFavNumbers\" */ 0x01))\n                /// @src 0:879:950  \"if (index>listOfFavNumbers.length) {...\"\n                {\n                    /// @src 0:929:938  \"return  0\"\n                    var := /** @src -1:-1:-1 */ 0\n                    /// @src 0:929:938  \"return  0\"\n                    leave\n                }\n                /// @src 0:967:990  \"listOfFavNumbers[index]\"\n                let _1, _2 := storage_array_index_access_uint256_dyn_ptr(var_index)\n                /// @src 0:959:990  \"return  listOfFavNumbers[index]\"\n                var := /** @src 0:72:1444  \"contract SimpleStorage {...\" */ shr(shl(3, _2), sload(/** @src 0:967:990  \"listOfFavNumbers[index]\" */ _1))\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ac816839aef9272e8d65dfb23485bf6ac961bbe6df8adf6b37920c169dc96a1164736f6c63430008180033\"\n    }\n}\n","hash":"010000cbc19d28aaba26a511f9939c58cbcad3f7aae4d923b363f75a7f995f82","factoryDependencies":{}}}}}}